# !/usr/bin/env python3
#
# script name:  Signature-based Malware Detection Part 2 of 3
# author:       ben_podawiltz
# revision:     10.3.21
#
######################################


##########################
#
# Libraries
import os 
import hashlib
import datetime
##########################################


def linuxSearch(file_str, dir_str, hash_search=False):
    malicious = [] # sets an empty array
    hashList = []
    filecount = 0
    print(len(malicious))
    for root, dir, files in os.walk(dir_str): # search through the directories and subfolders
        print('Searching for in:',root)
        filecount += 1 # begins count indexed from 0
        if hash_search == True: # if str is true, iterate through files
            # hash_file()
            for f in files:
                currentPath = os.path.join(root,f) # saves full path with filename to variable
                hashList.append(hash_file(currentPath)) # loads hashList array with full path of hash file
                print("*" * 15)
                print(hashList[len(hashList)-1]) # prints the hash of current file
                print(datetime.datetime.now()) # prints date
                print(f) # print filename
                print(os.stat(currentPath).st_size) # Prints stats of file size
                print(currentPath) # prints complete path 
                print("*" * 15)
        if file_str in files and hash_search == False: # if 
            matchPath = os.path.join(root,file_str)
            malicious.append(matchPath)
            print("Found file: ", file_str, "Found Path: ", matchPath)
    if hash_search == False:
        if len(malicious) == 0:
            print("File Not Found")
        print("Files searched: ", filecount, "Hits Found: ", len(malicious))
        print(malicious)
    if hash_search == True:
        print(hashList)



def main_menu():
    print("[1.] Search for malicious file string:")
    print("[2.] Add hash value to all searched files: ")
    print("[3.] Quit")
    user_input = input(
        "Welcome to the signature based malware script please select method above:")

    if user_input == "1":
        # file_str = "dummmy.txt"
        file_str = input("Please enter file name for search: ")
        # dir_str = "/home/benjamin/dummy/"  
        dir_str = input("Please enter directory for search: ")   
        linuxSearch(file_str, dir_str, False)
    elif user_input == "2":
        # file_str = "dummmy.txt"
        # file_str = input("Please enter file name for search: ")
        # dir_str = "/home/benjamin/dummy/"  
        dir_str = input("Please enter directory for search: ")   
        linuxSearch('', dir_str, True)
    elif user_input == "3":
        exit
    else:
        print("Error, make another selection")


def hash_file(filename):
   """"This function returns the SHA-1 hash
   of the file passed into it"""

   # make a hash object
   h = hashlib.sha1()

   # open file for reading in binary mode
   with open(filename,'rb') as file:

       # loop till the end of the file
       chunk = 0
       while chunk != b'':
           # read only 1024 bytes at a time
           chunk = file.read(1024)
           h.update(chunk)

   # return the hex representation of digest
   return h.hexdigest()

def call_hash():
    apikey = os.getenv('API_KEY_VIRUSTOTAL') # Set your environment variable before proceeding. You'll need a free API key from virustotal.com so get signed up there first.
    hash = '31032341a0874d237a579cc8071cca36e7631d801ba0cf392dfcafa0483fcebc' # Set your hash here. 

    # This concatenates everything into a working shell statement that gets passed into virustotal-search.py
    query = 'python3 virustotal-search.py -k ' + apikey + ' -m ' + hash

    os.system(query)


if __name__=='__main__':
    main_menu()


##################################################

# Resource: https://geeksforgeeks.org/os-module-python-examples/
# https://tutorialspoint.com/file-searching-using-python
# https://www.w3schools.com/python/ref_list_append.asp
# https://www.programiz.com/python-programming/examples/hash-file

# End